import speech_recognition as sr
import pyttsx3
import webbrowser
import requests
import openai
from gtts import gTTS
import pygame
import os

# Initialize Text-to-Speech Engine
engine = pyttsx3.init()
engine.setProperty('rate', 150)  # Speech rate
engine.setProperty('volume', 0.9)  # Volume

# Set your API keys
openai.api_key = "My open AI key"
NEWS_API_KEY = "My news api key"

# Speak Function
def speak(text, use_gtts=False):
    if use_gtts:
        tts = gTTS(text=text, lang='en')
        tts.save("response.mp3")
        pygame.mixer.init()
        pygame.mixer.music.load("response.mp3")
        pygame.mixer.music.play()
        while pygame.mixer.music.get_busy():
            continue
        os.remove("response.mp3")
    else:
        engine.say(text)
        engine.runAndWait()

# Listen Function
def listen():
    recognizer = sr.Recognizer()
    with sr.Microphone() as source:
        print("Listening...")
        recognizer.adjust_for_ambient_noise(source)
        try:
            audio = recognizer.listen(source, timeout=5)
            return recognizer.recognize_google(audio)
        except sr.UnknownValueError:
            return "Sorry, I didn't catch that."
        except sr.WaitTimeoutError:
            return "No input detected."
        except Exception as e:
            return str(e)

# Open Website
def open_website(command):
    websites = {
        "google": "https://www.google.com",
        "facebook": "https://www.facebook.com",
        "youtube": "https://www.youtube.com",
        "linkedin": "https://www.linkedin.com",
    }
    for site in websites:
        if site in command.lower():
            webbrowser.open(websites[site])
            speak(f"Opening {site}.")
            return
    speak("Sorry, I couldn't find the website.")

# Fetch News
def fetch_news():
    url = f"https://newsapi.org/v2/top-headlines?country=in&apiKey={NEWS_API_KEY}"
    try:
        response = requests.get(url)
        articles = response.json().get('articles', [])
        if articles:
            speak("Here are the latest news headlines.")
            for i, article in enumerate(articles[:5], start=1):
                speak(f"{i}. {article['title']}")
        else:
            speak("No news articles found.")
    except Exception as e:
        speak("Failed to fetch news.")

# OpenAI ChatGPT Integration
def generate_response(prompt):
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
        )
        answer = response['choices'][0]['message']['content']
        speak(answer)
    except Exception as e:
        speak("I couldn't process your request.")

# Music Playback
def play_music(command):
    # This assumes you have predefined URLs for songs in a dictionary
    music_library = {
        "song one": "https://path/to/song1.mp3",
        "song two": "https://path/to/song2.mp3"
    }
    for song, url in music_library.items():
        if song in command.lower():
            webbrowser.open(url)
            speak(f"Playing {song}.")
            return
    speak("Song not found in the library.")

# Main Function
def jarvis():
    speak("Initializing Jarvis...")
    while True:
        print("Awaiting Wake Word...")
        command = listen().lower()
        if "jarvis" in command:
            speak("Yes, I'm listening.")
            command = listen().lower()
            
            if "open" in command:
                open_website(command)
            elif "play music" in command:
                play_music(command)
            elif "news" in command:
                fetch_news()
            elif "exit" in command or "quit" in command:
                speak("Goodbye!")
                break
            else:
                generate_response(command)

# Run Jarvis
if __name__ == "__main__":
    jarvis()
